{"name":"Rocketeer","tagline":"Rocketeer provides a fast and easy way to deploy your Laravel projects","body":"Rocketeer [![Build Status](https://travis-ci.org/Anahkiasen/rocketeer.png?branch=master)](https://travis-ci.org/Anahkiasen/rocketeer) [![Latest Stable Version](https://poser.pugx.org/anahkiasen/rocketeer/v/stable.png)](https://packagist.org/packages/anahkiasen/rocketeer) [![Total Downloads](https://poser.pugx.org/anahkiasen/rocketeer/downloads.png)](https://packagist.org/packages/anahkiasen/rocketeer)\r\n=========\r\n\r\nRocketeer provides a fast and easy way to set-up and deploy your Laravel projects. **Rocketeer requires Laravel 4.1 as it uses the new _illuminate/remote_ component**.\r\n\r\n## Using Rocketeer\r\n\r\nI recommend you checkout this [Getting Started](https://github.com/Anahkiasen/rocketeer/wiki/Getting-started) guide before anything. It will get you quickly set up to use Rocketeer.\r\n\r\nThe available commands in Rocketeer are :\r\n\r\n```\r\ndeploy\r\n\tdeploy:check               Check if the server is ready to receive the application\r\n\tdeploy:cleanup             Clean up old releases from the server\r\n\tdeploy:current             Displays what the current release is\r\n\tdeploy:deploy              Deploy the website.\r\n\tdeploy:rollback            Rollback to the previous release, or to a specific one\r\n\tdeploy:rollback {release}  Rollback to a specific release\r\n\tdeploy:setup               Set up the remote server for deployment\r\n\tdeploy:teardown            Removes the remote applications and existing caches\r\n```\r\n\r\n## Tasks\r\n\r\nAn important concept in Rocketeer is Tasks : most of the commands you see right above are using predefined Tasks underneath : **Rocketeer\\Tasks\\Setup**, **Rocketeer\\Tasks\\Deploy**, etc.\r\nNow, the core of Rocketeer is you can hook into any of those Tasks to peform additional actions, for this you'll use the `before` and `after` arrays of Rocketeer's config file.\r\n\r\nYou can read more about Tasks and what you can do with them [in the wiki](https://github.com/Anahkiasen/rocketeer/wiki/Tasks).\r\n\r\n## Why not Capistrano ?\r\n\r\nThat's a question that's been asked to me, why not simply use Capistrano ? I've used Capistrano in the past, it does everything you want it to do, that's a given.\r\n\r\nBut, it remains a Ruby package and one that's tightly coupled to Rails in some ways; Rocketeer makes it so that you don't have Ruby files hanging around your app. That way you configure it once and can use it wherever you want in the realm of Laravel, even outside of the deploy routine.\r\nIt's also meant to be a lot easier to comprehend, for first-time users or novices, Capistrano is a lot to take at once – Rocketeer aims to be as simple as possible by providing smart defaults and speeding up the time between installing it and first hitting `deploy`.\r\n\r\nIt's also more though out for the PHP world – although you can configure Capistrano to run Composer and PHPUnit, that's not something it expects from the get go, while those tasks that are a part of every Laravel developper are integrated in Rocketeer's core deploy process.\r\n\r\n# Setup\r\n\r\nBefore anything : **Rocketeer requires Laravel 4.1 as it uses the new _illuminate/remote_ component**.\r\nNow if you fit that requirement, you're good to go. There are two ways to setup Rocketeer :\r\n\r\n## Adding the package\r\n\r\n### With Package Installer\r\n\r\nSimply do this :\r\n\r\n```\r\nartisan package:install anahkiasen/rocketeer\r\nartisan config:publish anahkiasen/rocketeer\r\n```\r\n\r\n### Manually\r\n\r\nTo use it, add the following to your `composer.json` file :\r\n\r\n```json\r\n\"anahkiasen/rocketeer\": \"dev-master\"\r\n```\r\n\r\nAnd this line to the `providers` array in your `app/config/app.php` file :\r\n\r\n```php\r\n'Rocketeer\\RocketeerServiceProvider',\r\n```\r\n\r\nAnd this line to the `aliases` array in your `app/config/app.php` file :\r\n\r\n```php\r\n'Rocketeer' => 'Rocketeer\\Facades\\Rocketeer',\r\n```\r\n\r\nThen publish the config :\r\n\r\n```\r\nartisan config:publish anahkiasen/rocketeer\r\n```\r\n\r\n## Configuration\r\n\r\nThere are two files to configure in order to use Rocketeer.\r\n\r\n### app/config/remote.php\r\n\r\nThis first one is fairly easy : there are a lot of stuff but if you're familiar with them and/or only have one server to deploy to, you can ignore most of it.\r\nWhat you want to edit basically is those three lines :\r\n\r\n```php\r\n  'production' => array(\r\n    'host'     => 'myserver.fr',\r\n    'username' => 'myusername',\r\n    'password' => 'mypassword',\r\n    'key'      => '',\r\n  ),\r\n```\r\n\r\n### app/config/packages/anahkiasen/rocketeer/config.php\r\n\r\nNow this one is a little more... well there is a lot more to it, but trust me it's pretty straightforward. Take your time to read the comments about what each of the configuration option mean.\r\nTo get you started here is an example config file to make you picture a little more what goes into each field :\r\n\r\n```php\r\n<?php return array(\r\n\r\n  // Remote access\r\n  //\r\n  // You can either use a single connection or an array of connections\r\n  // For this configure your app/remote.php file\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  // The remote connection(s) to deploy to\r\n  'connections' => 'production',\r\n\r\n  // Git Repository\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  'git' => array(\r\n\r\n    // The SSH/HTTPS adress to your Git Repository\r\n    'repository' => 'https://bitbucket.org/myUsername/facebook.git',\r\n\r\n    // Its credentials\r\n    'username'   => 'myUsername',\r\n    'password'   => 'myPassword',\r\n\r\n    // The branch to deploy\r\n    'branch'     => 'master',\r\n  ),\r\n\r\n  // Remote server\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  'remote' => array(\r\n\r\n    // The root directory where your applications will be deployed\r\n    'root_directory'   => '/home/www/',\r\n\r\n    // The default name of the application to deploy\r\n    'application_name' => 'facebook',\r\n\r\n    // The number of releases to keep at all times\r\n    'releases' => 4,\r\n\r\n    // A list of folders/file to be shared between releases\r\n    'shared' => array(\r\n      'public/img/users',\r\n      'app/database/production.sqlite',\r\n    ),\r\n  ),\r\n\r\n  // Tasks\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  // Here you can define custom tasks to execute after certain actions\r\n  'tasks' => array(\r\n\r\n    // Tasks to execute before commands\r\n    'before' => array(),\r\n\r\n    // Tasks to execute after commands\r\n    'after' => array(\r\n      'deploy'  => array(\r\n        'bower install',\r\n        'php artisan basset:build'\r\n      ),\r\n    ),\r\n\r\n    // Custom Tasks to register with Rocketeer\r\n    'custom' => array(),\r\n  ),\r\n\r\n);\r\n```\r\n\r\n# Tasks\r\n\r\nAn important concept in Rocketeer is Tasks : most of the commands you see right above are using predefined Tasks underneath : **Rocketeer\\Tasks\\Setup**, **Rocketeer\\Tasks\\Deploy**, etc.\r\nNow, the core of Rocketeer is you can hook into any of those Tasks to peform additional actions, for this you'll use the `before` and `after` arrays of Rocketeer's config file.\r\nYou can also add Tasks to Rocketeer to use directly via Artisan.\r\n\r\nA task can be three things :\r\n- A simple one-line command, like `composer install`\r\n- A closure, giving you access to Rocketeer's core helpers to perform more advanced actions\r\n- And finally a class, extending the `Rocketeer\\Tasks\\Task` class, giving you full at-home control. All custom-made Tasks must have at least an `execute` method. And that's all.\r\n\r\nEach level gives you a little more control and comfort – this is intentional, if you need more control than what Closures give you, then you probably need a class.\r\n\r\n-----\r\n\r\n## Hooking into Rocketeer's Tasks\r\n\r\nWhat most user will do is hook into the existing Rocketeer's Tasks to do things before or after. There is two ways to do that :\r\n\r\n### Defining Tasks in the config file\r\n\r\nYou can hook into any task via the `tasks` array in Rocketeer's config file. The syntax is pretty basic, here you can see an example with the three types of Tasks mentionned above :\r\n\r\n```php\r\n<?php\r\n'after' => array(\r\n  'setup' => array(\r\n\r\n    // Commands\r\n    'composer install',\r\n\r\n    // Actual Tasks classes\r\n    'MyNamespace\\MyTaskClass',\r\n\r\n    // Closures\r\n    function($task) {\r\n      $tests = $task->runForCurrentRelease('phpunit --coverage-html=tests/coverage');\r\n\r\n      if ($tests) {\r\n        $task->command->info('Tests ran perfectly dude !');\r\n      } else {\r\n        $task->command->error('Aw man, tests failed and stuff')\r\n      }\r\n    },\r\n  ),\r\n?>\r\n```\r\n\r\n### Defining Tasks using the facade\r\n\r\nRocketeer also provides you with a facade to use, if you don't want to put stuff in the config file :\r\n\r\n```php\r\n<?php\r\nRocketeer::before('deploy', function($task) {\r\n  $task->command->info('Sup guys');\r\n});\r\n\r\nRocketeer::after('deploy', array(\r\n  'composer install',\r\n  'bower install'\r\n));\r\n\r\nRocketeer::after('deploy', 'MyClass');\r\n?>\r\n```\r\n\r\nYou give as first argument the name of the name of the Task you'd like to act on, and then your task.\r\n\r\n## Creating your own Tasks\r\n\r\nSometimes you have things to do that don't fit in with the existing Tasks Rocketeer provides. That's why you can create your own tasks, here is an example one. As you can see it's pretty easy.\r\n\r\n```php\r\n<?php\r\nclass Migrate extends Rocketeer\\Tasks\\Task\r\n{\r\n\r\n  /**\r\n   * Description of the Task\r\n   *\r\n   * @var string\r\n   */\r\n  public $description = 'Migrates the database';\r\n\r\n  /**\r\n   * Executes the Task\r\n   *\r\n   * @return void\r\n   */\r\n  public function execute()\r\n  {\r\n    $this->command->info('Running migrations');\r\n    $this->runMigrations();\r\n  }\r\n}\r\n?>\r\n```\r\n\r\n### Registering your custom Task\r\n\r\n Now that the class is created, you need to register it with Rocketeer. As with the hooks, you can either do that via the config file, in the `tasks.custom` array :\r\n\r\n```php\r\n'custom' => array(\r\n  'Migrate',\r\n),\r\n```\r\n\r\nOr via the facade in your `app/start/artisan.php` file :\r\n\r\n```php\r\nRocketeer::add('Migrate');\r\n```\r\n\r\nAnd there you go, tadah !\r\n\r\n![artisan](http://i.imgur.com/jwdQ2Ly.png)\r\n\r\n-----\r\n\r\n## Writing Tasks\r\n\r\n### Core methods\r\n\r\nThe core methods of any Task is the `run` method, this is the one that lies at the bottom of nearly every other helper.\r\nIt just runs commands on the remote server, and returns the output.\r\n\r\n```php\r\n<?php\r\n$return = $this->run('composer install');\r\n?>\r\n```\r\n\r\nYou can also pass it an array of commands to execute. Now, note this because it's important : every call to `run` is self contained. Meaning this :\r\n\r\n```php\r\n<?php\r\n// Returns /\r\n$this->run('cd first-folder');\r\n$folder = $this->run('pwd');\r\n\r\n// Returns /first-folder/\r\n$folder = $this->run(array(\r\n  'cd first-folder',\r\n  'pwd',\r\n));\r\n?>\r\n```\r\n\r\nTo automate running tasks in folders, two helpers exist : `runInFolder` and `runForCurrentRelease`. The first one will run one or more tasks in a folder, while the other one will run one or more tasks in the current release's folder.\r\n\r\n```php\r\n<?php\r\n$this->run(array(\r\n  'cd /home/www/website/releases/123456789',\r\n  'ls',\r\n));\r\n\r\n// Is the same as\r\n\r\n$this->runInFolder('releases/123456789', 'ls');\r\n\r\n// Is the same as\r\n\r\n$this->runForCurrentRelease('ls');\r\n?>\r\n```\r\n\r\n### Folder helpers\r\n\r\nA few folder/file-manipulation methods are also present, they're very basic and just abstract low-level bash commands but, hey, they're good to have :\r\n\r\n```php\r\n<?php\r\n$this->move('folder/file.php', 'new-folder/file.php');\r\n$array = $this->listContents('folder');\r\n$boolean = $this->fileExists('file.php');\r\n$boolean = $this->fileExists('folder');\r\n$this->createFolder('folder');\r\n$this->removeFolder('folder');\r\n$this->symlink('folder-a', 'folder-b');\r\n$phpunit = $this->which('phpunit', 'vendor/bin/phpunit'); // Second argument is fallback\r\n?>\r\n```\r\n\r\n### Tasks-related methods\r\n\r\nSome methods are used by other Rocketeer tasks and can be used by you to create your own. All of them are relative to the current release.\r\n\r\n```php\r\n<?php\r\n// Run tests\r\n$boolean = $this->runTests();\r\n$boolean = $this->runTests('--stop-on-failure');\r\n\r\n// Run migrations\r\n$this->runMigrations();\r\n$this->runMigrations(true); // Seeds the database too\r\n\r\n// Run Composer\r\n$this->runComposer();\r\n\r\n// Set folders as web-writtable\r\n$this->setPermissions('app');\r\n?>\r\n```\r\n\r\n### External methods\r\n\r\nTasks also have access to the other classes of Rocketeer. You can call other tasks :\r\n\r\n```php\r\n<?php\r\n$this->executeTask('Rollback');\r\n```\r\n\r\nAnd call other classes's methods. There are five main classes surrounding Tasks which you'll like want to use :\r\n- The **Command** is the command executing the Task. You'll use it to display messages and fetch options and arguments\r\n- The **Releases Manager** handles releases and their paths\r\n- The **Deployments Manager** keeps up to date the `deployments.json` file which tracks the remote server's state\r\n- The **Remote** is your entry point to the server, it's the class the `run` method uses\r\n- The **Rocketeer** classes handles informations provided by the User (config and stuff)\r\n\r\n```php\r\n<?php\r\n$this->releasesManager->getCurrentRelease();\r\n$this->releasesManager->getPathToRelease('123456789');\r\n$this->releasesManager->getPreviousRelease();\r\n$this->releasesManager->getReleases();\r\n\r\n$this->deploymentsManager->setValue('key', 'value');\r\n$this->deploymentsManager->getValue('key');\r\n$this->deploymentsManager->getDeploymentsFile();\r\n\r\n$this->rocketeer->getHomeFolder();\r\n$this->rocketeer->getApplicationName();\r\n$this->rocketeer->getGitRepository();\r\n$this->rocketeer->getOption('remote.shared');\r\n\r\n$this->command->argument('argument');\r\n$this->command->option('verbose');\r\n$this->command->info('It works !');\r\n$this->command->error('It does not work !');\r\n\r\n$this->remote->run(array(\r\n  'cd folder', 'ls',\r\n));\r\n?>\r\n```\r\n\r\nThis is not all of it of course, you can check out these classes's sources for a full documented list of the methods available.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}