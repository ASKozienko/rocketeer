{"name":"Rocketeer","tagline":"Rocketeer provides a fast and easy way to deploy your Laravel projects","body":"Rocketeer [![Build Status](https://travis-ci.org/Anahkiasen/rocketeer.png?branch=master)](https://travis-ci.org/Anahkiasen/rocketeer) [![Latest Stable Version](https://poser.pugx.org/anahkiasen/rocketeer/v/stable.png)](https://packagist.org/packages/anahkiasen/rocketeer) [![Total Downloads](https://poser.pugx.org/anahkiasen/rocketeer/downloads.png)](https://packagist.org/packages/anahkiasen/rocketeer)\r\n=========\r\n\r\nRocketeer provides a fast and easy way to set-up and deploy your Laravel projects. **Rocketeer requires Laravel 4.1 as it uses the new _illuminate/remote_ component**.\r\n\r\n## Using Rocketeer\r\n\r\nI recommend you checkout this [Getting Started](https://github.com/Anahkiasen/rocketeer/wiki/Getting-started) guide before anything. It will get you quickly set up to use Rocketeer.\r\n\r\nThe available commands in Rocketeer are :\r\n\r\n```\r\ndeploy\r\n\tdeploy:setup               Set up the website for deployment\r\n\tdeploy:deploy              Deploy the website.\r\n\tdeploy:cleanup             Clean up old releases from the server\r\n\tdeploy:current             Displays what the current release is\r\n\tdeploy:rollback {release}  Rollback to a specific release\r\n\tdeploy:rollback            Rollback to the previous release\r\n\tdeploy:teardown            Removes the remote applications and existing caches\r\n```\r\n\r\n## Tasks\r\n\r\nAn important concept in Rocketeer is Tasks : most of the commands you see right above are using predefined Tasks underneath : **Rocketeer\\Tasks\\Setup**, **Rocketeer\\Tasks\\Deploy**, etc.\r\nNow, the core of Rocketeer is you can hook into any of those Tasks to peform additional actions, for this you'll use the `before` and `after` arrays of Rocketeer's config file.\r\n\r\nYou can read more about Tasks and what you can do with them [in the wiki](https://github.com/Anahkiasen/rocketeer/wiki/Tasks).\r\n\r\n## Why not Capistrano ?\r\n\r\nThat's a question that's been asked to me, why not simply use Capistrano ? I've used Capistrano in the past, it does everything you want it to do, that's a given.\r\n\r\nBut, it remains a Ruby package and one that's tightly coupled to Rails in some ways; Rocketeer makes it so that you don't have Ruby files hanging around your app. That way you configure it once and can use it wherever you want in the realm of Laravel, even outside of the deploy routine.\r\nIt's also meant to be a lot easier to apprehend, for first-time users or novices, Capistrano is a lot to take at once – Rocketeer aims to be as simple as possible by providing smart defaults and speeding up the time between installing it and first hitting `deploy`.\r\n\r\nIt's also more though out for the PHP world – although you can configure Capistrano to run Composer and PHPUnit, that's not something it expects from the get go, while those tasks that are a part of every Laravel developper are integrated in Rocketeer's core deploy process.\r\n\r\n# Setup\r\n\r\nBefore anything : **Rocketeer requires Laravel 4.1 as it uses the new _illuminate/remote_ component**.\r\nNow if you fit that requirement, you're good to go. There are two ways to setup Rocketeer :\r\n\r\n## Adding the package\r\n\r\n### With Package Installer\r\n\r\nSimply do this :\r\n\r\n```\r\nartisan package:install anahkiasen/rocketeer\r\nartisan config:publish anahkiasen/rocketeer\r\n```\r\n\r\n### Manually\r\n\r\nTo use it, add the following to your `composer.json` file :\r\n\r\n```json\r\n\"anahkiasen/rocketeer\": \"dev-master\"\r\n```\r\n\r\nAnd this line to the `providers` array in your `app/config/app.php` file :\r\n\r\n```php\r\n'Rocketeer\\RocketeerServiceProvider',\r\n```\r\n\r\nAnd this line to the `aliases` array in your `app/config/app.php` file :\r\n\r\n```php\r\n'Rocketeer' => 'Rocketeer\\Facades\\Rocketeer',\r\n```\r\n\r\nThen publish the config :\r\n\r\n```\r\nartisan config:publish anahkiasen/rocketeer\r\n```\r\n\r\n## Configuration\r\n\r\nThere are two files to configure in order to use Rocketeer.\r\n\r\n### app/config/remote.php\r\n\r\nThis first one is fairly easy : there are a lot of stuff but if you're familiar with them and/or only have one server to deploy to, you can ignore most of it.\r\nWhat you want to edit basically is those three lines :\r\n\r\n```php\r\n  'production' => array(\r\n    'host'     => 'myserver.fr',\r\n    'username' => 'myusername',\r\n    'password' => 'mypassword',\r\n    'key'      => '',\r\n  ),\r\n```\r\n\r\n### app/config/packages/anahkiasen/rocketeer/config.php\r\n\r\nNow this one is a little more... well there is a lot more to it, but trust me it's pretty straightforward. Take your time to read the comments about what each of the configuration option mean.\r\nTo get you started here is an example config file to make you picture a little more what goes into each field :\r\n\r\n```php\r\n<?php return array(\r\n\r\n  // Remote access\r\n  //\r\n  // You can either use a single connection or an array of connections\r\n  // For this configure your app/remote.php file\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  // The remote connection(s) to deploy to\r\n  'connections' => 'production',\r\n\r\n  // Git Repository\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  'git' => array(\r\n\r\n    // The SSH/HTTPS adress to your Git Repository\r\n    'repository' => 'https://bitbucket.org/myUsername/facebook.git',\r\n\r\n    // Its credentials\r\n    'username'   => 'myUsername',\r\n    'password'   => 'myPassword',\r\n\r\n    // The branch to deploy\r\n    'branch'     => 'master',\r\n  ),\r\n\r\n  // Remote server\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  'remote' => array(\r\n\r\n    // The root directory where your applications will be deployed\r\n    'root_directory'   => '/home/www/',\r\n\r\n    // The default name of the application to deploy\r\n    'application_name' => 'facebook',\r\n\r\n    // The number of releases to keep at all times\r\n    'releases' => 4,\r\n  ),\r\n\r\n  // Tasks\r\n  //////////////////////////////////////////////////////////////////////\r\n\r\n  // Here you can define custom tasks to execute after certain actions\r\n  'tasks' => array(\r\n\r\n    // Tasks to execute before commands\r\n    'before' => array(),\r\n\r\n    // Tasks to execute after commands\r\n    'after' => array(\r\n      'deploy'  => array(\r\n        'bower install',\r\n        'php artisan basset:build'\r\n      ),\r\n    ),\r\n  ),\r\n\r\n);\r\n```\r\n\r\n# Tasks\r\n\r\nAn important concept in Rocketeer is Tasks : most of the commands you see right above are using predefined Tasks underneath : **Rocketeer\\Tasks\\Setup**, **Rocketeer\\Tasks\\Deploy**, etc.\r\nNow, the core of Rocketeer is you can hook into any of those Tasks to peform additional actions, for this you'll use the `before` and `after` arrays of Rocketeer's config file.\r\n\r\n## The different types of tasks\r\n\r\nA task can be three things :\r\n- A simple one-line command, like `composer install`\r\n- A closure, giving you access to Rocketeer's core helpers to perform more advanced actions\r\n- And finally a class, extending the `Rocketeer\\Tasks\\Task` class, giving you full at-home control\r\n\r\nEach level gives you a little more control and comfort – this is intentional, if you need more control than what Closures give you, then you probably need a class.\r\n\r\nSo the three kind of tasks above could be seen in your config file :\r\n\r\n```php\r\n<?php\r\n'after' => array(\r\n  'Setup' => array(\r\n\r\n    // Commands\r\n    'composer install',\r\n\r\n    // Closures\r\n    function($task) {\r\n      $task->rocketeer->gotoFolder('releases/134781354');\r\n      $tests = $task->run('phpunit');\r\n\r\n      if ($tests) {\r\n        $task->command->info('Tests ran perfectly dude !');\r\n      } else {\r\n        $task->command->error('Aw man, tests failed and stuff')\r\n      }\r\n    },\r\n\r\n    // Actual Tasks classes\r\n    'MyNamespace\\MyTaskClass',\r\n  ),\r\n```\r\n\r\n```php\r\n<?php\r\nnamespace MyNamespace;\r\n\r\nclass MyTaskClass extends Rocketeer\\Tasks\\Task\r\n{\r\n  public function execute()\r\n  {\r\n    $currentReleasePath = $this->releasesManager->getCurrentReleasePath();\r\n    $this->rocketeer->gotoFolder($currentReleasePath);\r\n    $tests = $this->run('phpunit');\r\n\r\n    if ($tests) {\r\n      $this->command->info('Tests ran perfectly dude !');\r\n    } else {\r\n      $this->command->error('Aw man, tests failed and stuff')\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Defining your tasks\r\n\r\nAs seen above, you can define tasks in the config file, but as your tasks get bigger this may become cumbersome. So before you start putting everything into classes, you can use Rocketeer's facade to define your tasks :\r\n\r\n```php\r\n<?php\r\nRocketeer::before('deploy', function($task) {\r\n  $task->command->info('Sup guys');\r\n});\r\n\r\nRocketeer::after('deploy', array(\r\n  'composer install',\r\n  'bower install'\r\n));\r\n\r\nRocketeer::after('deploy', 'MyClass');\r\n```\r\n\r\nYou give as first argument the name of the fully-qualified name of the Task you'd like to act on, and then your task.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}